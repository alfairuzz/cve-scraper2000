from requests_html import HTMLSession
from bs4 import BeautifulSoup
import pandas as pd


def get_oracle_details(soup):
    print('Retrieving Oracle Data...')

    # Find all tables with the class 'otable-w2'
    tables = soup.find_all('table', class_='otable-w2')

    tables = list(set(tables))

    # Specify the file path where you want to save the Excel file
    file_name = "./data/Oracle Updates/oracle_security_tables.xlsx"

    dataframe_list = []

    # Loop through each table found on the webpage
    for i, table in enumerate(tables):
        # Extract table headers (handle multi-row headers if applicable)
        headers = []
        for row in table.find_all('thead'):
            headers.append([th.get_text(separator=" ").strip() for th in row.find_all('th')])

        # Flatten multi-row headers into a single row
        flat_headers = []
        for header_row in headers:
            flat_headers.extend(header_row)

        # Extract table data
        data = []
        for row in table.find_all('tbody')[0].find_all('tr'):
            # Extract the row data
            row_data = [td.get_text().strip() for td in row.find_all(['td', 'th'])]

            # Check if the number of columns in the row matches the header count
            if len(row_data) < len(flat_headers):
                # Pad row data with empty strings if it's shorter than the header
                row_data += [''] * (len(flat_headers) - len(row_data))

            data.append(row_data)

        # Create a DataFrame with the extracted headers and data
        df = pd.DataFrame(data, columns=flat_headers)
        
        if len(df.columns) >= 16:
            custom_headers = [
            "CVE ID", "Product", "Component", "Protocol", "Remote Exploit without Authentication?", 
            "Base Score", "Attack Vector", "Attack Complex", "Privs Required", 
            "User Interact", "Scope", "Confidentiality", "Integrity", 
            "Availability", "Supported Versions Affected", "Notes", "Blank Column"]
            
            df.columns = custom_headers
            final_df = df.drop(columns = ["Blank Column"])

            dataframe_list.append(final_df)

    return dataframe_list