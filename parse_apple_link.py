import pandas as pd
from bs4 import BeautifulSoup

def get_apple_details(soup):
    """
    Extracts vulnerability details from Apple's security updates page.

    Parameters:
    soup (BeautifulSoup): The parsed HTML content of the Apple security updates page.

    Returns:
    pd.DataFrame: A DataFrame containing 'Available for', 'Impact', 'Description', and 'CVE' details.
    """
    print('Getting Apple data...')
    
    # Keywords for relevant information
    keywords = ['Available for:', 'Impact:', 'Description:', 'CVE-']
    
    # Phrases to exclude from the results
    exclude_phrases = [
        'This document describes',
        'For our customers\' protection',
        'Apple security documents',
        'For more information about security',
        'Released'
    ]
    
    # Initialize lists for storing information
    available_for_list = []
    impact_list = []
    description_list = []
    cve_list = []
    cvss_base_score_list = []
    cvss_rating_list = []
    
    # Temporary variables to store data
    available_for = ''
    impact = ''
    description = ''
    
    # Find all paragraphs with the class 'gb-paragraph'
    paragraphs = soup.find_all('p', class_='gb-paragraph')
    
    # Iterate over the paragraphs and extract relevant data
    for paragraph in paragraphs:
        text = paragraph.get_text().strip()
        
        # Skip paragraphs containing any exclude phrases
        if any(exclude_phrase in text for exclude_phrase in exclude_phrases):
            continue
        
        # Extract and store information based on keywords
        if text.startswith('Available for:'):
            available_for = text.replace('Available for:', '').strip()
        elif text.startswith('Impact:'):
            impact = text.replace('Impact:', '').strip()
        elif text.startswith('Description:'):
            description = text.replace('Description:', '').strip()
        elif 'CVE-' in text:
            # Extract the CVE identifier
            cve = text.split(':')[0].strip()

            # Append the collected data to the lists
            available_for_list.append(available_for)
            impact_list.append(impact)
            description_list.append(description)
            cve_list.append(cve)
            cvss_base_score_list.append('Not Available']
            cvss_rating_list.append('Not Available']
            
            # Reset temporary variables for the next entry
            available_for = ''
            impact = ''
            description = ''
    
    # Create a DataFrame from the collected data
    df = pd.DataFrame({
        'CVE': cve_list,
        'CVSS Base Score': cvss_base_score_list,
        'CVSS Rating': cvss_rating_list,
        'Affected Product': available_for_list,
        'Impact': impact_list,
        'Description': description_list,
    })
    
    return df
