import re
import pandas as pd
from bs4 import BeautifulSoup

def get_sap_details(soup):
    """
    Extracts SAP security note details from the provided BeautifulSoup object.

    Parameters:
    soup (BeautifulSoup): The parsed HTML content of the SAP security notes page.

    Returns:
    pd.DataFrame: A DataFrame containing 'Note#', 'Title', 'CVE Number', 'Priority',
                  'CVSS', 'Product', 'Versions', and 'Impact' details.
    """
    print('Retrieving SAP Data...')

    # Find all tables in the HTML content
    tables = soup.find_all('table')

    if not tables:
        print("No tables found in the provided HTML content.")
        return pd.DataFrame()  # Return an empty DataFrame if no tables are found

    # Assuming the first table contains the relevant data
    table_html = str(tables[0])

    # Use pandas to read the table directly
    try:
        df = pd.read_html(table_html)[0]
    except ValueError:
        print("Failed to parse the table with pandas.")
        return pd.DataFrame()

    # Ensure the DataFrame has the expected columns
    if df.shape[1] < 4:
        print("The table does not have the expected number of columns.")
        return pd.DataFrame()

    # Rename the columns to match expected headers
    df.columns = ["Note#", "Title", "Priority", "CVSS"] + list(df.columns[4:])

    # Extract CVE numbers from the Title and duplicate rows if multiple CVEs are found
    df['CVE Number'] = df['Title'].apply(lambda x: re.findall(r'CVE-\d{4}-\d{4,}', x) or ['N/A'])
    df = df.explode('CVE Number').reset_index(drop=True)

    # Function to extract Product, Versions, and Impact from the Title
    def extract_product_and_version(title):
        """
        Extracts Product, Versions, and Impact from the title string.

        Parameters:
        title (str): The title string containing the information.

        Returns:
        tuple: A tuple containing (product, versions, impact).
        """
        # Regular expression to capture Product and Versions information
        product_match = re.search(
            r'(?i)Product\s*[-:–—]\s*(.*?)(?=,?\s*(Versions?|Version\s*[:-–—]))',
            title
        )

        # Modify the version regex to account for inconsistent spacing between "Version" and "-"
        version_match = re.search(
            r'(?i)Version[s]?\s*[-:–—]?\s*(.*)',
            title
        )

        # Look for the pattern with "[Multiple CVEs]" or just "]"
        if "[Multiple CVEs]" in title:
            # Capture everything after "[Multiple CVEs]" and before "Product"
            impact_match = re.search(
                r'\[Multiple CVEs\]\s*(.*?)\s*Product',
                title,
                re.IGNORECASE | re.DOTALL
            )
        else:
            # Capture everything after the closing "]" and before "Product"
            impact_match = re.search(
                r'\]\s*(.*?)\s*Product',
                title,
                re.IGNORECASE | re.DOTALL
            )

        # Extract product and version information if found, else set to 'N/A'
        product = product_match.group(1).strip() if product_match else 'N/A'
        versions = version_match.group(1).strip() if version_match else 'N/A'

        # Extract the impact information if found, else set to 'N/A'
        impact = impact_match.group(1).strip() if impact_match else 'N/A'

        # Remove any remaining "CVEs" text within the impact if found
        impact = re.sub(r'CVEs\s*-.*', '', impact).strip()

        return product, versions, impact

    # Apply the extraction function to the 'Title' column
    extracted_info = df['Title'].apply(lambda x: pd.Series(extract_product_and_version(x)))
    extracted_info.columns = ['Product', 'Versions', 'Impact']
    df = pd.concat([df, extracted_info], axis=1)

    # Clean up the 'Versions' and 'Impact' columns
    df['Versions'] = df['Versions'].str.replace(r'–\s*', '', regex=True).str.strip()
    df['Impact'] = df['Impact'].str.strip()

    # Reorder columns to match the expected output
    df = df[["Note#", "Title", "CVE Number", "Priority", "CVSS", "Product", "Versions", "Impact"]]

    return df
