import re
import pandas as pd
from bs4 import BeautifulSoup

def get_sap_details(soup):
    """
    Extracts SAP security note details from the provided BeautifulSoup object.

    Parameters:
    soup (BeautifulSoup): The parsed HTML content of the SAP security notes page.

    Returns:
    pd.DataFrame: A DataFrame containing 'Note#', 'Title', 'CVE Number', 'Priority',
                  'CVSS', 'Product', 'Versions', and 'Impact' details.
    """
    print('Retrieving SAP Data...')

    # Find all tables in the HTML content
    tables = soup.find_all('table')

    if not tables:
        print("No tables found in the provided HTML content.")
        return pd.DataFrame()  # Return an empty DataFrame if no tables are found

    # Assuming the first table contains the relevant data
    table = tables[0]

    # Define the headers for the DataFrame
    headers = ["Note#", "Title", "CVE Number", "Priority", "CVSS"]

    # Initialize a list to store the extracted rows
    rows = []

    # Iterate over table rows, skipping the header row
    for row in table.find_all('tr')[1:]:
        cols = row.find_all('td')

        # Ensure there are enough columns to prevent IndexError
        if len(cols) < 4:
            continue  # Skip rows that don't have enough columns

        # Extract data from columns
        note_number = cols[0].get_text(strip=True)
        title_text = cols[1].get_text(separator=" ").strip()
        priority = cols[2].get_text(strip=True)
        cvss_score = cols[3].get_text(strip=True)

        # Find all CVE numbers in the title
        cve_matches = re.findall(r'CVE-\d{4}-\d{4,}', title_text)

        # If multiple CVEs are found, duplicate the row for each CVE
        if cve_matches:
            for cve_number in cve_matches:
                rows.append([note_number, title_text, cve_number, priority, cvss_score])
        else:
            # Handle cases where no CVE is found
            cve_number = 'N/A'
            rows.append([note_number, title_text, cve_number, priority, cvss_score])

    # Create a DataFrame from the extracted data
    df = pd.DataFrame(rows, columns=headers)

    # Function to extract Product, Versions, and Impact from the Title
    def extract_product_and_version(title):
        """
        Extracts Product, Versions, and Impact from the title string.

        Parameters:
        title (str): The title string containing the information.

        Returns:
        tuple: A tuple containing (product, versions, impact).
        """
        # Regular expression to capture Product and Versions information
        # This will handle various dash formats (colon, dash, em dash, en dash, etc.)
        product_match = re.search(
            r'(?i)Product\s*[-:–—]\s*(.*?)(?=,?\s*(Versions?|Version\s*[:-–—]))',
            title
        )

        # Modify the version regex to account for inconsistent spacing between "Version" and "-"
        version_match = re.search(
            r'(?i)Version[s]?\s*[-:–—]?\s*(.*)',
            title
        )

        # Look for the pattern with "[Multiple CVEs]" or just "]"
        if "[Multiple CVEs]" in title:
            # Capture everything after "[Multiple CVEs]" and before "Product"
            impact_match = re.search(
                r'\[Multiple CVEs\]\s*(.*?)\s*Product',
                title,
                re.IGNORECASE | re.DOTALL
            )
        else:
            # Capture everything after the closing "]" and before "Product"
            impact_match = re.search(
                r'\]\s*(.*?)\s*Product',
                title,
                re.IGNORECASE | re.DOTALL
            )

        # Extract product and version information if found, else set to 'N/A'
        product = product_match.group(1).strip() if product_match else 'N/A'
        versions = version_match.group(1).strip() if version_match else 'N/A'

        # Extract the impact information if found, else set to 'N/A'
        impact = impact_match.group(1).strip() if impact_match else 'N/A'

        # Remove any remaining "CVEs" text within the impact if found
        impact = re.sub(r'CVEs\s*-.*', '', impact).strip()

        return product, versions, impact

    # Apply the function to the 'Title' column to extract Product, Versions, and Impact
    extracted_info = df['Title'].apply(extract_product_and_version)
    df[['Product', 'Versions', 'Impact']] = pd.DataFrame(
        extracted_info.tolist(),
        index=df.index
    )

    # Clean up the 'Versions' and 'Impact' columns
    df['Versions'] = df['Versions'].replace(r'–\s*', '', regex=True)
    df['Impact'] = df['Impact'].str.strip()

    return df
