from requests_html import HTMLSession
from bs4 import BeautifulSoup
import pandas as pd
import re


def get_google_chrome_details(soup):
    print('Retrieving Google Chrome Data...')

    # Find all text containing CVE information
    cve_info = []
    for element in soup.find_all(text=True):  # Searching all text in the HTML
        if any(keyword in element for keyword in ['CVE', 'High', 'Medium', 'Low']):  # Check if any of the keywords are in the text
            cve_info.append(element.strip())  # Strip leading/trailing spaces and add to the list


    # Optionally, convert the list to a pandas DataFrame for better visualization
    df = pd.DataFrame(cve_info, columns=['CVE Information'])

    def detect_and_format_dataframe(df, cve_info):
        # A list of possible severities
        severities_list = ['High', 'Medium', 'Low']
        
        # Check if the DataFrame alternates between severity and CVE information
        def is_original_format(df):
            for i in range(0, len(df), 2):
                if not (df.iloc[i, 0].strip() in severities_list):  # Severity should be in even-indexed rows
                    return False
                if not re.match(r'CVE-\d{4}-\d+', df.iloc[i + 1, 0]):  # CVE should be in odd-indexed rows
                    return False
            return True

        # If the DataFrame is detected as being in the original format, proceed with formatting
        if is_original_format(df):
            # Initialize lists for the new columns
            severities = []
            cve_numbers = []
            descriptions = []

            # Iterate over the original data in pairs (Severity and CVE Information rows)
            for i in range(0, len(df), 2):
                severity = df.iloc[i, 0].strip()  # Severity is in even-indexed rows
                cve_info = df.iloc[i + 1, 0].strip()  # CVE info is in odd-indexed rows

                # Use regex to split the CVE info into the CVE number and the description
                match = re.match(r'(CVE-\d{4}-\d+):\s*(.*)', cve_info)

                if match:
                    cve_number = match.group(1)
                    description = match.group(2)

                    # Append to the respective lists
                    severities.append(severity)
                    cve_numbers.append(cve_number)
                    descriptions.append(description)

            # Create a new DataFrame in the desired format
            formatted_df = pd.DataFrame({
                'Severity': severities,
                'CVE Information': cve_numbers,
                'Description': descriptions
            })

            return formatted_df
        
        else:
            print("The DataFrame is not in the Case 1 format.")
            print('Checking for Case 2 format.')
            # if not case 1, then run case 2
            # example: "] High CVE-2024-8904: Type Confusion in V8. Reported by Popax21 on 2024-09-08"
            # Define lists to store extracted information
            severities = []
            cve_numbers = []
            descriptions = []

            # Define regex pattern to capture severity, CVE number, and description
            pattern = r'\] (\w+) (CVE-\d{4}-\d+): (.*)\. Reported'

            # Loop through each data point and extract the required information
            for item in cve_info:
                match = re.search(pattern, item)
                if match:
                    severities.append(match.group(1))         # Severity
                    cve_numbers.append(match.group(2))        # CVE Number
                    descriptions.append(match.group(3))       # Description

            # Create a DataFrame with the extracted columns
            df = pd.DataFrame({
                'Severity': severities,
                'CVE Number': cve_numbers,
                'Description': descriptions
            })
            return df  # If not in original format, return the DataFrame unchanged

    # Example usage:
    # original_df = pd.read_excel('path_to_original.xlsx')
    formatted_df = detect_and_format_dataframe(df, cve_info)

    
    return formatted_df